library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity RAM is
  port(
    clk : in STD_LOGIC;
    
    data : inout STD_LOGIC_VECTOR(3 downto 0);
    addr : in    STD_LOGIC_VECTOR(7 downto 0);
    
    RD : in STD_LOGIC;
    WR : in STD_LOGIC
    );
end RAM;

architecture Behavioral of RAM is
      signal rom_data_0 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111111110100010110";
    signal rom_data_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101100010010010010000";
    signal rom_data_2 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111001001011000011010";
    signal rom_data_3 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001010010100110101";

  signal out_buf : STD_LOGIC_VECTOR(3 downto 0) := (others=>'0');
begin
  process (clk)
  begin
    if rising_edge(clk) then
      if RD = '1' then
            out_buf <= rom_data_3(to_integer(unsigned(addr))) & rom_data_2(to_integer(unsigned(addr))) & rom_data_1(to_integer(unsigned(addr))) & rom_data_0(to_integer(unsigned(addr)));
      elsif WR = '1' then
            rom_data_0(to_integer(unsigned(addr))) <= data(0);
    rom_data_1(to_integer(unsigned(addr))) <= data(1);
    rom_data_2(to_integer(unsigned(addr))) <= data(2);
    rom_data_3(to_integer(unsigned(addr))) <= data(3);
      end if;
    end if;
  end process;

  data <= out_buf when RD = '1' else (others=>'Z');
end Behavioral;