library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity uop_rom is
PORT (addr : in STD_LOGIC_VECTOR (5 downto 0); 
Ad_en : out STD_LOGIC; 
Ad_sel : out STD_LOGIC; 
Dt_en : out STD_LOGIC; 
Dt_dir : out STD_LOGIC; 
bRD : out STD_LOGIC; 
bWR : out STD_LOGIC; 
IR_en : out STD_LOGIC; 
A_en : out STD_LOGIC; 
B_en : out STD_LOGIC; 
PH_en : out STD_LOGIC; 
PL_en : out STD_LOGIC; 
cpc_en : out STD_LOGIC; 
H_en : out STD_LOGIC; 
L_en : out STD_LOGIC; 
C_en : out STD_LOGIC; 
MC_sel : out STD_LOGIC; 
Ci : out STD_LOGIC; 
Z_en : out STD_LOGIC; 
alufun : out STD_LOGIC_VECTOR (1 downto 0); 
Ro_sel : out STD_LOGIC_VECTOR (2 downto 0); 
CA_sel : out STD_LOGIC; 
Mmc_sel : out STD_LOGIC_VECTOR (1 downto 0); 
Next_add : out STD_LOGIC_VECTOR (5 downto 0); 
AS1 : out STD_LOGIC; 
AS0 : out STD_LOGIC; 
AR1_en : out STD_LOGIC; 
AR0_en : out STD_LOGIC; 
Mov_mux_en : out STD_LOGIC; 
Mov_mux_sel : out STD_LOGIC; 
Z_sel : out STD_LOGIC);
end entity uop_rom;

architecture Behavioral of uop_rom is
    signal rom_Ad_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "1111111110011111100111111110000011111111111111100000111100";
    signal rom_Ad_sel_0 : STD_LOGIC_VECTOR (57 downto 0) := "1000000000000000000000000000000000011111111111100000000000";
    signal rom_Dt_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "1111101100011011000111101100000011011101110111000000111000";
    signal rom_Dt_dir_0 : STD_LOGIC_VECTOR (57 downto 0) := "0111101100011011000111101100000011011100000111000000111000";
    signal rom_bRD_0 : STD_LOGIC_VECTOR (57 downto 0) := "0011001100011011000011001100000011001100000111000000111001";
    signal rom_bWR_0 : STD_LOGIC_VECTOR (57 downto 0) := "1000000000000000000000000000000000000000110000000000000001";
    signal rom_IR_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000010000";
    signal rom_A_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000001000000010011100000000";
    signal rom_B_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    signal rom_PH_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000001000000000000000000000000000000000000000";
    signal rom_PL_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000010000000000000000000000000000000000000000";
    signal rom_cpc_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0100010001000000000100010000110100010000000000000000100000";
    signal rom_H_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    signal rom_L_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    signal rom_C_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000011110000000";
    signal rom_MC_sel_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000010000000";
    signal rom_Ci_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    signal rom_Z_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000010100000000";
    signal rom_alufun_1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000011000000000";
    signal rom_alufun_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000010100000000";
    signal rom_Ro_sel_2 : STD_LOGIC_VECTOR (57 downto 0) := "0011001100011011011011001100000011011110000111111100000000";
    signal rom_Ro_sel_1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000011000000000000000000000000000000000000000";
    signal rom_Ro_sel_0 : STD_LOGIC_VECTOR (57 downto 0) := "0011001100011011010011001100000011011110000111100000000000";
    signal rom_CA_sel_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000001000000";
    signal rom_Mmc_sel_1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000001001000000000000000000000000001";
    signal rom_Mmc_sel_0 : STD_LOGIC_VECTOR (57 downto 0) := "1000000001100010010000000001100100010001000100011111000000";
    signal rom_Next_add_5 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000100010000000000000000000000000000000000000000000";
    signal rom_Next_add_4 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000100010000000000001001000000000000000000000000000";
    signal rom_Next_add_3 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000001001000000000000000000000000000";
    signal rom_Next_add_2 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000001001000000000000000000000000000";
    signal rom_Next_add_1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000001000000000000000000000000000";
    signal rom_Next_add_0 : STD_LOGIC_VECTOR (57 downto 0) := "1000000001000000010000000000101100010001000100011110000000";
    signal rom_AS1_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000001000000010011100000000";
    signal rom_AS0_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000001000000010011110000000";
    signal rom_AR1_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000001000000000000000001000000000000000000000000000000000";
    signal rom_AR0_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0010000000100010000010000000000010000000000000000000000000";
    signal rom_Mov_mux_en_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000100000000000000000000000000";
    signal rom_Mov_mux_sel_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000100000000000000000000100000000000000000000000000";
    signal rom_Z_sel_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000001000000000000000000000000000000000000000000000000";
begin
    Ad_en <= rom_Ad_en_0(to_integer(unsigned(addr)));
    Ad_sel <= rom_Ad_sel_0(to_integer(unsigned(addr)));
    Dt_en <= rom_Dt_en_0(to_integer(unsigned(addr)));
    Dt_dir <= rom_Dt_dir_0(to_integer(unsigned(addr)));
    bRD <= rom_bRD_0(to_integer(unsigned(addr)));
    bWR <= rom_bWR_0(to_integer(unsigned(addr)));
    IR_en <= rom_IR_en_0(to_integer(unsigned(addr)));
    A_en <= rom_A_en_0(to_integer(unsigned(addr)));
    B_en <= rom_B_en_0(to_integer(unsigned(addr)));
    PH_en <= rom_PH_en_0(to_integer(unsigned(addr)));
    PL_en <= rom_PL_en_0(to_integer(unsigned(addr)));
    cpc_en <= rom_cpc_en_0(to_integer(unsigned(addr)));
    H_en <= rom_H_en_0(to_integer(unsigned(addr)));
    L_en <= rom_L_en_0(to_integer(unsigned(addr)));
    C_en <= rom_C_en_0(to_integer(unsigned(addr)));
    MC_sel <= rom_MC_sel_0(to_integer(unsigned(addr)));
    Ci <= rom_Ci_0(to_integer(unsigned(addr)));
    Z_en <= rom_Z_en_0(to_integer(unsigned(addr)));
    alufun <= rom_alufun_1(to_integer(unsigned(addr))) & rom_alufun_0(to_integer(unsigned(addr)));
    Ro_sel <= rom_Ro_sel_2(to_integer(unsigned(addr))) & rom_Ro_sel_1(to_integer(unsigned(addr))) & rom_Ro_sel_0(to_integer(unsigned(addr)));
    CA_sel <= rom_CA_sel_0(to_integer(unsigned(addr)));
    Mmc_sel <= rom_Mmc_sel_1(to_integer(unsigned(addr))) & rom_Mmc_sel_0(to_integer(unsigned(addr)));
    Next_add <= rom_Next_add_5(to_integer(unsigned(addr))) & rom_Next_add_4(to_integer(unsigned(addr))) & rom_Next_add_3(to_integer(unsigned(addr))) & rom_Next_add_2(to_integer(unsigned(addr))) & rom_Next_add_1(to_integer(unsigned(addr))) & rom_Next_add_0(to_integer(unsigned(addr)));
    AS1 <= rom_AS1_0(to_integer(unsigned(addr)));
    AS0 <= rom_AS0_0(to_integer(unsigned(addr)));
    AR1_en <= rom_AR1_en_0(to_integer(unsigned(addr)));
    AR0_en <= rom_AR0_en_0(to_integer(unsigned(addr)));
    Mov_mux_en <= rom_Mov_mux_en_0(to_integer(unsigned(addr)));
    Mov_mux_sel <= rom_Mov_mux_sel_0(to_integer(unsigned(addr)));
    Z_sel <= rom_Z_sel_0(to_integer(unsigned(addr)));
end Behavioral;